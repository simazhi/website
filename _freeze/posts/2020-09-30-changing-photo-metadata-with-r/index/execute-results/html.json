{
  "hash": "64231f72bd5df3b97b5f56924be2a0e3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Changing photo metadata with R\"\ndate: '2020-09-30'\ncategories: ['R', 'rstats']\nslug: changing-photo-metadata-with-r\nexecute:\n  freeze: auto\nimage: images/correct.png\n---\n\n\n\nOne gnarly problem I sometimes face is that when I transfer pictures from my phone to my computer, the metadata says that the date the picture was taken is actually the date the file was created on my computer. \nIn other words, the date is wrong.\nThis has bad consequences for photography software that reads the metadata and sorts them by date taken (like Flickr does for me).\n\nThe problem is illustrated here in this screenshot. \nWe can infer from the name of the file that it was taken on the 5th of September, while the creation date in my computer is today (30th of September).\n\n![](images/dateproblems.png)\n\nLuckily, with R it's not hard to get the correct metadata.\nThere are two possible routes. \nThe first one concerns real pictures, which actually still have the correct metadata hidden within the file; \nthe second one is for screenshots, which maybe have the wanted date in the filename, but which don't have intrinsic metadata.\n\nReady, set, go.\n\n# Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# general packages\nlibrary(tidyverse) # our swiss army knife\nlibrary(fs) # reading in files in a tidyish way\nlibrary(lubridate) # working with dates \n\n# specialized packages\nlibrary(exifr) # for reading photo metadata\n```\n:::\n\n\n\nApart from the general rstudio-like packages like `tidyverse`, `fs`, `glue` and `lubridate`, we need a specialized package `exifr` ([github](https://github.com/paleolimbot/exifr)) for reading EXIF metadata attached to pictures.\n`exifr` extracts these metadata and can output them in a nice dataframe.\nSpecifically we are interested in the variable \"DateTimeOriginal\". \n\n# Route 1: getting DateTimeOriginal and changing the creation date.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reading in all the different pictures we need to treat in batch\nfiles <- dir_ls(\"PATH TO FOLDER WHERE PICTURES ARE STORED\",\n                recurse = TRUE,\n                regexp = \".jpg$\")\n\n\n# defining a function\nchange_file_create_date <- function(afb){\n  # get correct exif date\n  read_exif(path = afb,\n            tags = c(\"DateTimeOriginal\")) %>%\n    pull(DateTimeOriginal) %>%\n    parse_date_time(\"Ymd HMS\", \n                    tz = \"Asia/Taipei\" #timezone\n                    ) -> correct_time\n\n  # changing the creation date\n  Sys.setFileTime(afb, correct_time)\n  \n}\n\n\n# run the function over all the different files\npurrr::walk(files, change_file_create_date)\n```\n:::\n\n\n\n# Route 2: pulling the date from filename and changing the creation date.\n\nScreenshots on my computer, which is configured in Dutch, have the following filename.\n\n````Schermafbeelding 2020-09-30-09-38-32.png````\n\nSo that means \"SCREENSHOT DATE-TIME.png\". The date and time can be foudn with a fairly simple regular expression, namely: \n\n````'4 NUMBERS' FOLLOWED BY FIVE TIMES THE SEQUENCE '-2 NUMBERS'````\n\nIn R code that is written like:\n\n````\\\\d{4}(-\\\\d\\\\d){5}````\n\nAnd then we're set. \nJust adapt the function definition in the middle and run it over the files we want to change.\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in files\nfiles <- dir_ls(\"PATH TO FOLDER WHERE PICTURES ARE STORED\",\n                recurse = TRUE,\n                regexp = \".jpg$\")\n\n# function definition\nchange_file_create_date <- function(afb){\n\n  # get correct date from filename\n  afb %>%\n    as.character() %>%\n    str_extract(\"\\\\d{4}(-\\\\d\\\\d){5}\")  %>%\n    parse_date_time(\"YmdHMS\", \n                      tz = \"Asia/Taipei\" #timezone\n                    ) -> correct_time\n  \n  # changing the creation date\n  Sys.setFileTime(afb, correct_time)\n  \n}\n\n\n# run the function over all the different files\nwalk(files, change_file_create_date)\n```\n:::\n\nAnd there we have it, based on the correct regular expression, we can batch process these without much effort.\n\n![](images/correct.png)\n\nAnd should you be wondering, this is the picture we were trying to change, with the nice message from my friends in zhuyin: I❤️U ㄚㄓˋ.\n\n<a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/86097314@N03/50364643777/in/datetaken/\" title=\"Untitled\"><img src=\"https://live.staticflickr.com/65535/50364643777_3813722e61_4k.jpg\" width=\"800\" height=\"600\" alt=\"Untitled\"></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}