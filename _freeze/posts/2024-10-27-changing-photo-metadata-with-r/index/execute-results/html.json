{
  "hash": "ead49afa3e0a8a6122985d7369ce0dec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Changing photo metadata with R\"\ndate: '2020-09-30'\ncategories: ['R', 'rstats', 'latex']\nexecute:\n  freeze: auto\nimage: obsidianheader.png\n---\n\n\n\nJust like in a previous update where we looked at glosses, today we are looking at how to draw a specific kind of syntactic tree, namely those of the [Role and Reference Grammar](https://en.wikipedia.org/wiki/Role_and_reference_grammar#:~:text=Role%20and%20reference%20grammar%20(RRG,and%20Robert%20Van%20Valin%2C%20Jr.&text=In%202012%2C%20Ball%20integrated%20his,breaking%20down%20language%20by%20meaning) type.\nA brief overview by Van Valin can be found [here](acsu.buffalo.edu/~rrgpage/rrg/RRGpaper.pdf).\n\nBasically, these are not your standard Chomskyan syntactic trees, but rather a more functional approach, in which there are often three projections with intersecting trees: the operator projection, the constituent projection and the focus structure projection.\n\nHere is Van Valin giving a really short intro:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n{{% tweet \"1308473381357064193\" %}}\n```\n\n:::\n:::\n\n{{< tweet \"https://x.com/canguroenglish/status/1308473381357064193\" >}}\n\n\n\n\n\n# Drawing trees in Latex with `RRGtrees`\n\nWhat is the best way to describe and draw these trees with Latex (the alternative being something like powerpoint).\nNow, in Latex, there exists the package `RRGtrees` [CTAN link here](https://ctan.org/pkg/rrgtrees?lang=en). \nIt has two dependencies `pst-node` and `pst-tree`.\nSo far looking okay.\n\nHowever, the package was last changed in 2004 and while [in 2017 it was still working](https://tex.stackexchange.com/questions/408134/trouble-drawing-role-and-reference-grammar-trees-in-latex-using-rrgtrees-package) I just could not get it to work in this year of 2020.\n\n# `forest` Gump \n\nEventually I just gave up and decided to check out another tree-drawing package, namely `forest` [CTAN link](https://ctan.org/pkg/forest?lang=en).\nLuckily, [Guido Vanden Wyngaerd](https://www.crissp.be/people/guido-vanden-wyngaerd/) has written a very useful quickstart guide [lingbuzz](https://ling.auf.net/lingbuzz/003391) for `forest` which helped me out tremendously.\n\nBecause I didn't find any RRG-specific forest tutorials, I decided to have a go at it and this is what you're reading now.\nI'm gonna draw three trees and provide the code, for public benefit and possibly my future self.\n\n# Set-up\n\nIf I am writing a Latex document, I would expect my minimal preamble to look something like this:\n\n````\n\\documentclass[]{article}\n\\usepackage[linguistics]{forest}\n\\usepackage{expex}\n\\begin{document}\n````\n\nAnd if I am writing in R markdown, my current standard, I would expect the following minimal YAML-header, i.e., exporting to Latex to pdf:\n\n````\n---\noutput:\n  bookdown::pdf_document2:\n    latex_engine: xelatex\n    toc: false\n    keep_tex: true\nheader-includes:\n- \\usepackage[linguistics]{forest}\n- \\usepackage{expex}\n---\n````\n\n# Tree 1\n\n````\n\\ex\n\\begin{forest}\n[SENTENCE [CLAUSE [CORE [CLAUSE [That she arrived late, roof]] [NUC [shocked]] [NP [everyone]]]]]\n\\end{forest}\n\\xe\n````\n\nThe result:\n\n![](/post/2020-09-30-drawing-rrg-trees-with-forest_files/tree1.png)\n\n\n# Tree 2\n\n````\n\\ex\n\\begin{forest}\n[SENTENCE\n  [CLAUSE\n  [CORE, name=core\n    [NP [Kim, tier=word]]\n    [NUC [PRED [V [saw, tier=word]]]]\n    [NP [Pat, tier=word]]\n    ]\n   [PERIPHERY, name=peri, no edge [PP [CORE [NUC [PRED [P [after, tier=word]]]] [CLAUSE [she arrived at the party, tier=word, roof]]]]]]\n  ]\n ]\n {\\draw[->] (peri) to[out=west,in=east]  (core) ;}\n\\end{forest}\n\\xe\n````\n\nThe result:\n\n![](/post/2020-09-30-drawing-rrg-trees-with-forest_files/tree2.png)\n\n\n# Tree 3\n\n````\n\\ex\n\\begin{forest}\n[,phantom \n  [Operator projection\\\\SENTENCE \n    [IF, no edge, name=if]\n    [CLAUSE, name=clause1\n      [TNS, no edge, name=tns]\n      [CLAUSE, name=clause2\n        [CORE\n          [NUC\n            [NP, no edge, name=npleft\n              [What\n                [ARG, name=argwhat]]\n              [did, no edge, name=did]]\n            [NP, no edge, name=npright\n                [Dana, tier=word\n                  [ARG, name=argdana\n                    [\\phantom{P}, name=phant, no edge\n                      [SPEECH ACT\\\\Focus structure projection, no edge, name=speech]]\n                    ]]]\n            [V, name=vgive\n              [give, tier=word\n                 [NUC]]]]]]]] \n  [Constituent projection\\\\SENTENCE\n    [CLAUSE\n      [PrCS, name=prcs]\n      [CORE, name=cora\n        [ARG, name=argleft]\n        [NUC\n          [PRED, name=predgive]]\n        [ARG\n          [NP\n            [Chris, tier=word\n              [ARG]]]]]\n      [PERIPHERY,no edge, name=peri\n        [ADV\n          [yesterday?, tier=word\n            [ADV, name=advyesterday]]]]]]\n]\n\\draw (npleft.north) -- (prcs.south);\n\\draw[dashed] (if.south) -- (did.north);\n\\draw[dashed] (tns.south) -- (did.north);\n\\draw (argleft.south) -- (npright.north);\n\\draw (vgive.north) -- (predgive.south);\n\\draw[->] (peri.west) -- (cora.east);\n\\draw[->] (if.east) -- (clause1.west);\n\\draw[->] (tns.east) -- (clause2.west);\n\\draw[dashed] (argwhat.south west) -- (speech.north);\n\\draw[dashed] (advyesterday.south east) -- (speech.north);\n\\draw[dotted] \n  (argwhat.south west) -- (phant.south)\n  (argwhat.south west) -- (argwhat.south east)\n  (phant.south) -- (argwhat.south east);\n\\end{forest}\n\\xe\n````\n\nThe result:\n\n![](/post/2020-09-30-drawing-rrg-trees-with-forest_files/tree3.png)\n\n\n# Salutation\n\nI don't know RRG that well, so don't shoot me if the trees are wrong, but now at least I know how to draw the trees with `forest`, and so can you!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}