{
  "hash": "3895ceaab139e37e421de6bda16785e4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Oft-used pdf manipulations with the command line\"\nauthor: \"Thomas Van Hoey\"\ndescription: \"Memento commandi\"\ndate: \"2025-08-07\"\ncategories: [\"pdf\", \"command line\", \"terminal\"]\nexecute:\n  freeze: auto\n  eval: false \nimage: picture.png\n---\n\n![](picture.png)\n\nThis blog post is mainly for myself but if it helps you, great.\nIn general, three pesky pdf manipulations I find myself involved with are:\n\n1. [ocr-ing](https://en.wikipedia.org/wiki/Optical_character_recognition) documents\n1. combining documents fast\n1. extracting pages from documents\n\n# Homebrew - terminal \n\nI'm just assuming you are on a Mac of sorts and have access to the terminal.\nMy favorite terminal implementation is [iterm2](https://iterm2.com/).\nYou can customize it by googling for a guide. \n[Here's a good one.](https://catalins.tech/improve-mac-terminal/)\n\nMake sure you also install [Homebrew](https://brew.sh/), the easy package manager.\nJust copy the install homebrew code in the terminal.\n\nThree main functions: installing, updating, removing.\n \nFor installation, just copy the install function of a package.\nFor this post's packages those are [qpdf](https://formulae.brew.sh/formula/qpdf#default) and [ocrmypdf](https://formulae.brew.sh/formula/ocrmypdf#default).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrew install qpdf\nbrew install ocrmypdf\n```\n:::\n\n\nMost packages will be some sort of interface to the real package, those are called 'casks'.\nFor example, a lightweight pdf reader I like using is called [skim](brew install --cask skim).\nIt's install command is \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrew install --cask skim\n```\n:::\n\n\nAfter a while you want to maybe update (every so often).\nThat command is simply\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrew upgrade\n```\n:::\n\n\nTo remove packages, just\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrew uninstall <packagename>\nbrew uninstall --cask <packagename>\n```\n:::\n\n\nGreat, now we have `qpdf`, `ocrmypdf` and maybe `skim`.\nNext, step, navigate to the folder where your document is located (must be absolute path).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncd PATH/TO/FOLDER/JUST/COPY/THIS\n```\n:::\n\nYou can check the files with the `ls` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls\n```\n:::\n\n\n# OCR-ing text\n\nVery easy, the basic command is on the left. \nI often find I have to redo suboptimal previous ocr-ing, so that is where the force argument comes from.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nocrmypdft inputdocument.pdf outputdocument.pdf --force-ocr\n```\n:::\n\n\nBam, presto!\n\n# Selecting pages from a file\n\n\nYou can clip page ranges, e.g., pages 1-3, or just single pages, e.g. 1, or a combination.\n**Note:** these pages are the actual pages of the document, not the internal numbering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpdf input.pdf --pages . 1-3 -- result.pdf\n```\n:::\n\n\n\n# Combining files\n\nTo combine, we make use of similar syntax. \nHere we combine the first page from file1.pdf with the second-third and seventh page of file2.pdf\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpdf --empty --pages file1.pdf 1 file2.pdf 1-3,7 -- result.pdf\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}